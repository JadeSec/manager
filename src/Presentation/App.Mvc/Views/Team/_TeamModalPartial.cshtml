<div id="modal-save" class="modal modal-blur fade" tabindex="-1" role="dialog" aria-hidden="true">
    <form ref="form" data-route="/api/team/{id}" data-route-save="/api/team/save" class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add a new team</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <div v-if="statusCode === 400 && errors.length > 0" class="alert alert-danger">
                        <p v-for="error in errors" :key="error">{{ error }}</p>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Name</label>
                    <div>
                        <input ref="name" type="text" class="form-control" required>
                        <p v-if="validate.Name" class="text-danger">{{ validate.Name.join(', ') }}</p>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Icon</label>
                    <div>
                        <input ref="icon" type="file" class="form-control" required>
                        <p v-if="validate.Icon" class="text-danger">{{ validate.Icon.join(', ') }}</p>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Description</label>
                    <div>
                        <textarea ref="description" class="form-control" required></textarea>
                        <p v-if="validate.Description" class="text-danger">{{ validate.Description.join(', ') }}</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" @@click="submit" class="btn btn-primary">Save</button>
            </div>
        </div>
    </form>
</div>

<script>

    //$('#modal-save').on('shown.bs.modal', function () {
      
    //});

    function modalSave(id) {
        console.log(id);
        new Vue({
            el: '#modal-save form',
            data() {
                return {
                    errors: [],
                    validate: {},
                    statusCode: null
                };
            },
            methods: {
                async submit() {
                    try {
                        const formData = this._getFormData();
                        const route = this.$refs.form.getAttribute('data-route-save');

                        const response = await axios.post(route, formData);
                        if (response.status >= 200 && response.status <= 226) {
                            location.reload();
                        }
                    } catch (error) {
                        if (error.response) {
                            const { data, status } = error.response;
                            this.errors = data.errors;
                            this.validate = data.data;
                            this.statusCode = status;
                        }
                    }
                },
                _getFormData() {
                    const formData = new FormData();

                    const keys = Object.keys(this.$refs);
                    keys.forEach(key => {
                        if (key != "form") {
                            var element = this.$refs[key];
                            if (element.type === 'file') {
                                formData.append(key, element.files[0])
                            } else {
                                formData.append(key, element.value);
                            }
                        }
                    });
                    return formData;
                }
            }
        });
    }


    //(function () {
    //    new Vue({
    //        el: '#modal-save',
    //        data() {
    //            return {
    //                errors: [],
    //                validate: {},
    //                statusCode: null
    //            };
    //        },
    //        methods: {
    //            async submit() {                    
    //                try {                        
    //                    const formData = this._getFormData();
    //                    const route = this.$refs.form.getAttribute('data-route');

    //                    const response = await axios.post(route, formData);
    //                    if (response.status >= 200 && response.status <= 226) {
    //                        location.reload();
    //                    }                        
    //                } catch (error) {
    //                    if (error.response) {
    //                        const { data, status } = error.response;
    //                        this.errors = data.errors;
    //                        this.validate = data.data;
    //                        this.statusCode = status;
    //                    }
    //                }
    //            },
    //            _getFormData() {
    //                const formData = new FormData();

    //                const keys = Object.keys(this.$refs);
    //                keys.forEach(key => {
    //                    if (key != "form") {
    //                        var element = this.$refs[key];
    //                        if (element.type === 'file') {
    //                            formData.append(key, element.files[0])
    //                        } else {
    //                            formData.append(key, element.value);
    //                        }
    //                    }
    //                });
    //                return formData;
    //            }
    //        }
    //    });
    //})();
</script>